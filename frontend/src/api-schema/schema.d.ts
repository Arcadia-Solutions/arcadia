/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/affiliated-artists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["Create artist affiliation"];
        delete: operations["Delete artist affiliation"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/artists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Get artist publications"];
        put?: never;
        post: operations["Create artist"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/apply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["Create user application"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["Login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/refresh-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["Refresh token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["Register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/collages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Get a collage"];
        put?: never;
        post: operations["Create a collage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/collages/entries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["Inserts entries into a collage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/conversations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Get conversations"];
        put?: never;
        post: operations["Create conversation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/conversations/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["Create conversation message"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/edition-groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["Create edition group"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/external-sources/comic-vine": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Get comic vine data"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/external-sources/isbn": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Get isbn data"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/external-sources/musicbrainz": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Get Musicbranz data"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/external-sources/tmdb": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Get TMDB data"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/forum": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Create forum"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/forum/post": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["Create forum post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/forum/sub-category": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Get forim sub-category thread"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/forum/thread": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Get forum thread"];
        put?: never;
        post: operations["Create forum thread"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/gifts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["Create gift"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/home": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Get home data"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/invitations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["Create invitation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/master-groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["Create master group"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/search/artists/lite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Case insensitive */
        get: operations["Search artists"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/search/collages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Case insensitive */
        get: operations["Search collages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/search/series": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Case insensitive */
        get: operations["Search series"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/search/title-groups/lite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Search title group info"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/search/torrent-requests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Search torrent requests"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/search/torrents/lite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Search torrents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/series": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Get series"];
        put?: never;
        post: operations["Create series"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/staff-pms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["List staff PMs"];
        put?: never;
        post: operations["Create staff PM"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/staff-pms/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["Reply to staff PM"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/staff-pms/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Get staff PM"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/staff-pms/{id}/resolve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["Resolve staff PM"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/subscriptions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["Create subscription"];
        delete: operations["Remove subscription"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/title-groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Get title group"];
        put: operations["Edit title group"];
        post: operations["Create title group"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/title-groups/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["Create title group comment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/title-groups/lite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Get title group info lite"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/torrent-requests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Get torrent requests"];
        put?: never;
        post: operations["Create torrent request"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/torrent-requests/comment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["Create torrent request comment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/torrent-requests/fill": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["Fill torrent request"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/torrent-requests/vote": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["Create torrent request vote"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/torrents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Download .torrent file"];
        put: operations["Edit torrent"];
        post: operations["Create torrent"];
        delete: operations["Delete torrent"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/torrents/registered": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Get registered torrents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/torrents/reports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["Create torrent report"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/torrents/top": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Get top torrent"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/torrents/upload-info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Get upload information"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user-applications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Get user applications"];
        put: operations["Update user application status"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Get users"];
        put: operations["Edit user"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/conversations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Get user conversations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Get me"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/registered": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Get registered users"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/warnings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["Warn users"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/wiki/articles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["Get wiki article"];
        put?: never;
        post: operations["Create wiki article"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AffiliatedArtistHierarchy: {
            artist: components["schemas"]["Artist"];
            /** Format: int64 */
            artist_id: number;
            /** Format: date-time */
            created_at: string;
            /** Format: int32 */
            created_by_id: number;
            /** Format: int64 */
            id: number;
            nickname?: string | null;
            roles: components["schemas"]["ArtistRole"][];
            /** Format: int32 */
            title_group_id: number;
        };
        AffiliatedArtistLite: {
            /** Format: int64 */
            artist_id: number;
            name: string;
        };
        AffiliatedEntityHierarchy: {
            /** Format: date-time */
            created_at: string;
            /** Format: int32 */
            created_by_id: number;
            entity: components["schemas"]["Entity"];
            /** Format: int64 */
            entity_id: number;
            /** Format: int64 */
            id: number;
            roles: components["schemas"]["EntityRole"][];
            /** Format: int32 */
            title_group_id: number;
        };
        Artist: {
            /** Format: date-time */
            created_at: string;
            /** Format: int32 */
            created_by_id: number;
            description: string;
            /** Format: int32 */
            edition_groups_amount: number;
            /** Format: int64 */
            id: number;
            /** Format: int32 */
            leechers_amount: number;
            name: string;
            pictures: string[];
            /** Format: int32 */
            seeders_amount: number;
            /** Format: int32 */
            snatches_amount: number;
            /** Format: int32 */
            title_groups_amount: number;
            /** Format: int32 */
            torrents_amount: number;
        };
        ArtistAndTitleGroupsLite: {
            artist: components["schemas"]["Artist"];
            title_groups: components["schemas"]["TitleGroupHierarchyLite"][];
        };
        ArtistLite: {
            /** Format: int64 */
            id: number;
            name: string;
            pictures: string[];
        };
        /** @enum {string} */
        ArtistRole: "main" | "guest" | "producer" | "director" | "cinematographer" | "actor" | "writer" | "composer" | "remixer" | "conductor" | "dj_compiler" | "arranger" | "host" | "author" | "illustrator" | "editor" | "developer" | "designer";
        /** @enum {string} */
        AudioBitrateSampling: "64" | "128" | "192" | "256" | "320" | "APS (VBR)" | "V2 (VBR)" | "V1 (VBR)" | "APX (VBR)" | "V0 (VBR)" | "Lossless" | "24bit Lossless" | "DSD64" | "DSD128" | "DSD256" | "DSD512" | "Other";
        /** @enum {string} */
        AudioChannels: "1.0" | "2.0" | "2.1" | "5.0" | "5.1" | "7.1";
        /** @enum {string} */
        AudioCodec: "mp2" | "mp3" | "aac" | "ac3" | "dts" | "flac" | "pcm" | "true-hd" | "opus" | "dsd";
        Collage: {
            category: components["schemas"]["CollageCategory"];
            collage_type: components["schemas"]["CollageType"];
            cover?: string | null;
            /** Format: date-time */
            created_at: string;
            /** Format: int32 */
            created_by_id: number;
            description: string;
            /** Format: int64 */
            id: number;
            name: string;
            tags: string[];
        };
        CollageAndAssociatedData: {
            collage: components["schemas"]["Collage"];
            entries: components["schemas"]["CollageEntryHierarchy"][];
        };
        /** @enum {string} */
        CollageCategory: "Personal" | "Staff Picks" | "External" | "Theme";
        CollageEntry: {
            /** Format: int64 */
            artist_id?: number | null;
            /** Format: int64 */
            collage_id: number;
            /** Format: date-time */
            created_at: string;
            /** Format: int32 */
            created_by_id: number;
            /** Format: int64 */
            entity_id?: number | null;
            /** Format: int64 */
            id: number;
            /** Format: int32 */
            master_group_id?: number | null;
            note?: string | null;
            /** Format: int32 */
            title_group_id?: number | null;
        };
        CollageEntryHierarchy: {
            artist?: null | components["schemas"]["ArtistLite"];
            /** Format: int64 */
            artist_id?: number | null;
            /** Format: int64 */
            collage_id: number;
            /** Format: date-time */
            created_at: string;
            /** Format: int32 */
            created_by_id: number;
            entity?: null | components["schemas"]["EntityLite"];
            /** Format: int64 */
            entity_id?: number | null;
            /** Format: int64 */
            id: number;
            master_group?: null | components["schemas"]["MasterGroupLite"];
            /** Format: int32 */
            master_group_id?: number | null;
            note?: string | null;
            title_group?: null | components["schemas"]["TitleGroupHierarchyLite"];
            /** Format: int32 */
            title_group_id?: number | null;
        };
        CollageSearchResponse: {
            results: components["schemas"]["CollageSearchResult"][];
            /** Format: int64 */
            total_items: number;
        };
        CollageSearchResult: {
            category: components["schemas"]["CollageCategory"];
            collage_type: components["schemas"]["CollageType"];
            cover?: string | null;
            /** Format: date-time */
            created_at: string;
            created_by: components["schemas"]["UserLite"];
            /** Format: int32 */
            created_by_id: number;
            description: string;
            /** Format: int64 */
            entries_amount: number;
            /** Format: int64 */
            id: number;
            /** Format: date-time */
            last_entry_at: string;
            name: string;
            tags: string[];
        };
        /** @enum {string} */
        CollageType: "Artist" | "Entity" | "TitleGroup" | "MasterGroup";
        /** @enum {string} */
        ContentType: "movie" | "video" | "tv_show" | "music" | "podcast" | "software" | "book" | "collection";
        Conversation: {
            /** Format: date-time */
            created_at: string;
            /** Format: int64 */
            id: number;
            /** Format: int32 */
            receiver_id: number;
            /** Format: date-time */
            receiver_last_seen_at: string;
            /** Format: int32 */
            sender_id: number;
            /** Format: date-time */
            sender_last_seen_at: string;
            subject: string;
        };
        ConversationHierarchy: {
            /** Format: date-time */
            created_at: string;
            /** Format: int64 */
            id: number;
            messages: components["schemas"]["ConversationMessageHierarchy"][];
            receiver: components["schemas"]["UserLiteAvatar"];
            /** Format: date-time */
            receiver_last_seen_at: string;
            sender: components["schemas"]["UserLiteAvatar"];
            /** Format: date-time */
            sender_last_seen_at: string;
            subject: string;
        };
        ConversationMessage: {
            content: string;
            /** Format: int64 */
            conversation_id: number;
            /** Format: date-time */
            created_at: string;
            /** Format: int32 */
            created_by_id: number;
            /** Format: int64 */
            id: number;
        };
        ConversationMessageHierarchy: {
            content: string;
            /** Format: date-time */
            created_at: string;
            created_by: components["schemas"]["UserLiteAvatar"];
            /** Format: int64 */
            id: number;
        };
        ConversationMessageHierarchyLite: {
            /** Format: date-time */
            created_at: string;
            created_by: components["schemas"]["UserLite"];
        };
        ConversationOverview: {
            correspondant: components["schemas"]["UserLite"];
            /** Format: date-time */
            created_at: string;
            /** Format: int64 */
            id: number;
            last_message: components["schemas"]["ConversationMessageHierarchyLite"];
            /** Format: int32 */
            receiver_id: number;
            /** Format: date-time */
            receiver_last_seen_at: string;
            /** Format: int32 */
            sender_id: number;
            /** Format: date-time */
            sender_last_seen_at: string;
            subject: string;
        };
        ConversationsOverview: {
            conversations: components["schemas"]["ConversationOverview"][];
        };
        EditedTitleGroup: {
            category?: null | components["schemas"]["TitleGroupCategory"];
            content_type: components["schemas"]["ContentType"];
            country_from?: string | null;
            covers: string[];
            description: string;
            embedded_links: {
                [key: string]: {
                    [key: string]: string;
                };
            };
            external_links: string[];
            /** Format: int32 */
            id: number;
            /** Format: int32 */
            master_group_id?: number | null;
            name: string;
            name_aliases: string[];
            original_language?: null | components["schemas"]["Language"];
            /** Format: date-time */
            original_release_date: string;
            platform?: null | components["schemas"]["Platform"];
            screenshots: string[];
            tagline?: string | null;
            tags: string[];
        };
        EditedTorrent: {
            /** Format: int32 */
            audio_bitrate?: number | null;
            audio_bitrate_sampling?: null | components["schemas"]["AudioBitrateSampling"];
            audio_channels?: null | components["schemas"]["AudioChannels"];
            audio_codec?: null | components["schemas"]["AudioCodec"];
            container: string;
            description?: string | null;
            /** Format: int32 */
            duration?: number | null;
            /** Format: int32 */
            edition_group_id: number;
            extras: components["schemas"]["Extras"][];
            features?: components["schemas"]["Features"][] | null;
            /** Format: int32 */
            id: number;
            languages: components["schemas"]["Language"][];
            mediainfo?: string | null;
            release_group?: string | null;
            release_name?: string | null;
            subtitle_languages: components["schemas"]["Language"][];
            uploaded_as_anonymous: boolean;
            video_codec?: null | components["schemas"]["VideoCodec"];
            video_resolution?: null | components["schemas"]["VideoResolution"];
            /** Format: int32 */
            video_resolution_other_x?: number | null;
            /** Format: int32 */
            video_resolution_other_y?: number | null;
        };
        EditedUser: {
            avatar?: string | null;
            description: string;
            email: string;
        };
        EditionGroup: {
            additional_information: {
                [key: string]: string;
            };
            covers: string[];
            /** Format: date-time */
            created_at: string;
            /** Format: int32 */
            created_by_id: number;
            description?: string | null;
            distributor?: string | null;
            external_links: string[];
            /** Format: int32 */
            id: number;
            name?: string | null;
            /** Format: date-time */
            release_date: string;
            source?: null | components["schemas"]["Source"];
            /** Format: int32 */
            title_group_id: number;
            /** Format: date-time */
            updated_at: string;
        };
        EditionGroupHierarchy: {
            additional_information: {
                [key: string]: string;
            };
            covers: string[];
            /** Format: date-time */
            created_at: string;
            /** Format: int32 */
            created_by_id: number;
            description?: string | null;
            distributor?: string | null;
            external_links: string[];
            /** Format: int32 */
            id: number;
            name?: string | null;
            /** Format: date-time */
            release_date: string;
            source?: null | components["schemas"]["Source"];
            /** Format: int32 */
            title_group_id: number;
            torrents: components["schemas"]["TorrentHierarchy"][];
            /** Format: date-time */
            updated_at: string;
        };
        EditionGroupHierarchyLite: {
            additional_information: {
                [key: string]: string;
            };
            covers: string[];
            distributor?: string | null;
            /** Format: int32 */
            id: number;
            name?: string | null;
            /** Format: date-time */
            release_date: string;
            source?: null | components["schemas"]["Source"];
            /** Format: int32 */
            title_group_id: number;
            torrents: components["schemas"]["TorrentHierarchyLite"][];
        };
        EditionGroupInfoLite: {
            additional_information: {
                [key: string]: string;
            };
            distributor?: string | null;
            /** Format: int32 */
            id: number;
            name?: string | null;
            /** Format: date-time */
            release_date: string;
            source?: null | components["schemas"]["Source"];
        };
        Entity: {
            /** Format: date-time */
            created_at: string;
            /** Format: int32 */
            created_by_id: number;
            description: string;
            /** Format: int64 */
            id: number;
            name: string;
            pictures: string[];
        };
        EntityLite: {
            /** Format: int64 */
            id: number;
            name: string;
            pictures: string[];
        };
        /** @enum {string} */
        EntityRole: "producer" | "developer" | "designer" | "label" | "network";
        /** @enum {string} */
        ExternalDB: "tmdb";
        ExternalDBData: {
            affiliated_artists: components["schemas"]["AffiliatedArtistHierarchy"][];
            edition_group?: null | components["schemas"]["UserCreatedEditionGroup"];
            /** Format: int32 */
            existing_title_group_id?: number | null;
            title_group?: null | components["schemas"]["UserCreatedTitleGroup"];
        };
        /** @enum {string} */
        Extras: "booklet" | "manual" | "behind_the_scenes" | "deleted_scenes" | "featurette" | "trailer" | "other";
        /** @enum {string} */
        Features: "HDR" | "HDR 10" | "HDR 10+" | "DV" | "Commentary" | "Remux" | "3D" | "OCR" | "Cue";
        ForumCategoryHierarchy: {
            /** Format: int32 */
            id: number;
            name: string;
            sub_categories: components["schemas"]["ForumSubCategoryHierarchy"][];
        };
        ForumCategoryLite: {
            /** Format: int32 */
            id: number;
            name: string;
        };
        ForumOverview: {
            forum_categories: components["schemas"]["ForumCategoryHierarchy"][];
        };
        ForumPost: {
            content: string;
            /** Format: date-time */
            created_at: string;
            /** Format: int32 */
            created_by_id: number;
            /** Format: int64 */
            forum_thread_id: number;
            /** Format: int64 */
            id: number;
            sticky: boolean;
            /** Format: date-time */
            updated_at: string;
        };
        ForumPostAndThreadName: {
            content: string;
            /** Format: date-time */
            created_at: string;
            /** Format: int32 */
            created_by_id: number;
            /** Format: int64 */
            forum_thread_id: number;
            forum_thread_name: string;
            /** Format: int64 */
            id: number;
            sticky: boolean;
            /** Format: date-time */
            updated_at: string;
        };
        ForumPostHierarchy: {
            content: string;
            /** Format: date-time */
            created_at: string;
            created_by: components["schemas"]["UserLiteAvatar"];
            /** Format: int64 */
            forum_thread_id: number;
            /** Format: int64 */
            id: number;
            sticky: boolean;
            /** Format: date-time */
            updated_at: string;
        };
        ForumSubCategoryHierarchy: {
            category: components["schemas"]["ForumCategoryLite"];
            forbidden_classes: string[];
            /** Format: int32 */
            id: number;
            latest_post_in_thread: components["schemas"]["ForumThreadPostLite"];
            name: string;
            /** Format: int64 */
            posts_amount: number;
            threads?: components["schemas"]["ForumThreadHierarchy"][] | null;
            /** Format: int64 */
            threads_amount: number;
        };
        ForumThread: {
            /** Format: date-time */
            created_at: string;
            /** Format: int32 */
            created_by_id: number;
            /** Format: int32 */
            forum_sub_category_id: number;
            /** Format: int64 */
            id: number;
            locked: boolean;
            name: string;
            /** Format: int64 */
            posts_amount: number;
            sticky: boolean;
        };
        ForumThreadAndPosts: {
            /** Format: date-time */
            created_at: string;
            /** Format: int32 */
            created_by_id: number;
            /** Format: int32 */
            forum_sub_category_id: number;
            /** Format: int64 */
            id: number;
            locked: boolean;
            name: string;
            posts: components["schemas"]["ForumPostHierarchy"][];
            /** Format: int64 */
            posts_amount: number;
            sticky: boolean;
        };
        ForumThreadHierarchy: {
            /** Format: date-time */
            created_at: string;
            created_by: components["schemas"]["UserLite"];
            /** Format: int64 */
            id: number;
            latest_post: components["schemas"]["ForumThreadPostLite"];
            locked: boolean;
            name: string;
            /** Format: int64 */
            posts_amount: number;
            sticky: boolean;
        };
        ForumThreadPostLite: {
            /** Format: date-time */
            created_at: string;
            created_by: components["schemas"]["UserLite"];
            /** Format: int64 */
            id: number;
            name: string;
        };
        GetUserApplicationsQuery: {
            /** Format: int64 */
            limit?: number | null;
            /** Format: int64 */
            page?: number | null;
            status?: null | components["schemas"]["UserApplicationStatus"];
        };
        Gift: {
            /** Format: int64 */
            bonus_points: number;
            /** Format: int32 */
            freeleech_tokens: number;
            /** Format: int64 */
            id: number;
            message: string;
            /** Format: int32 */
            receiver_id: number;
            /** Format: int32 */
            sender_id: number;
            /** Format: date-time */
            sent_at: string;
        };
        HomePage: {
            latest_uploads: components["schemas"]["TitleGroupLite"][];
            recent_announcements: components["schemas"]["ForumPostAndThreadName"][];
            stats: components["schemas"]["HomeStats"];
        };
        HomeStats: {
            /** Format: int64 */
            artists: number;
            /** Format: int64 */
            enabled_users: number;
            /** Format: int64 */
            entities: number;
            /** Format: int64 */
            titles: number;
            /** Format: int64 */
            torrents: number;
            /** Format: int64 */
            torrents_uploaded_today: number;
            /** Format: int64 */
            users_active_this_month: number;
            /** Format: int64 */
            users_active_this_week: number;
            /** Format: int64 */
            users_active_today: number;
        };
        Invitation: {
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            expires_at: string;
            /** Format: int64 */
            id: number;
            invitation_key: string;
            message: string;
            receiver_email: string;
            /** Format: int32 */
            receiver_id?: number | null;
            /** Format: int32 */
            sender_id: number;
            /** Format: int64 */
            user_application_id?: number | null;
        };
        /** @enum {string} */
        Language: "Albanian" | "Arabic" | "Belarusian" | "Bengali" | "Bosnian" | "Bulgarian" | "Cantonese" | "Catalan" | "Chinese" | "Croatian" | "Czech" | "Danish" | "Dutch" | "English" | "Estonian" | "Finnish" | "French" | "German" | "Greek" | "Hebrew" | "Hindi" | "Hungarian" | "Icelandic" | "Indonesian" | "Italian" | "Japanese" | "Kannada" | "Korean" | "Macedonian" | "Malayalam" | "Mandarin" | "Nepali" | "Norwegian" | "Persian" | "Polish" | "Portuguese" | "Romanian" | "Russian" | "Serbian" | "Spanish" | "Swedish" | "Tamil" | "Tagalog" | "Telugu" | "Thai" | "Turkish" | "Ukrainian" | "Vietnamese" | "Wolof" | "Other";
        Login: {
            password: string;
            remember_me: boolean;
            username: string;
        };
        LoginResponse: {
            refresh_token: string;
            token: string;
        };
        MasterGroup: {
            /** Format: date-time */
            created_at: string;
            /** Format: int32 */
            created_by_id: number;
            /** Format: int32 */
            id: number;
            name?: string | null;
            /** Format: date-time */
            updated_at: string;
        };
        MasterGroupLite: {
            /** Format: int32 */
            id: number;
            name?: string | null;
        };
        Peer: {
            agent?: string | null;
            /** Format: date-time */
            first_seen_at: string;
            /** Format: 0.0.0.0 */
            ip: string;
            /** Format: date-time */
            last_seen_at: string;
            /** Format: int32 */
            port: number;
            /** Format: int64 */
            real_downloaded: number;
            /** Format: int64 */
            real_uploaded: number;
            status: components["schemas"]["PeerStatus"];
        };
        /** @enum {string} */
        PeerStatus: "Seeding" | "Leeching";
        /** @enum {string} */
        Platform: "Windows" | "Linux" | "MacOS" | "Xbox";
        Profile: {
            last_five_snatched_torrents: components["schemas"]["TitleGroupHierarchyLite"][];
            last_five_uploaded_torrents: components["schemas"]["TitleGroupHierarchyLite"][];
            peers: components["schemas"]["Peer"][];
            /** Format: int32 */
            unread_conversations_amount: number;
            user: components["schemas"]["User"];
            user_warnings: components["schemas"]["UserWarning"][];
        };
        PublicProfile: {
            last_five_uploaded_torrents: components["schemas"]["TitleGroupHierarchyLite"][];
            user: components["schemas"]["PublicUser"];
        };
        PublicRating: {
            /** Format: double */
            rating: number;
            service: components["schemas"]["ExternalDB"];
            /** Format: int64 */
            votes: number;
        };
        PublicUser: {
            /** Format: int64 */
            artist_comments: number;
            avatar?: string | null;
            /** Format: int64 */
            average_seeding_time: number;
            banned: boolean;
            /** Format: int64 */
            bonus_points: number;
            class: components["schemas"]["UserClass"];
            /** Format: int64 */
            collages_started: number;
            /** Format: date-time */
            created_at: string;
            description: string;
            /** Format: int64 */
            downloaded: number;
            /** Format: int32 */
            forum_posts: number;
            /** Format: int32 */
            forum_threads: number;
            /** Format: int32 */
            id: number;
            /** Format: int32 */
            invitations: number;
            /** Format: int64 */
            invited: number;
            /** Format: date-time */
            last_seen: string;
            /** Format: int32 */
            leeching: number;
            /** Format: double */
            ratio: number;
            /** Format: int64 */
            real_downloaded: number;
            /** Format: int64 */
            real_uploaded: number;
            /** Format: int32 */
            request_comments: number;
            /** Format: int64 */
            requests_filled: number;
            /** Format: int64 */
            requests_voted: number;
            /** Format: double */
            required_ratio: number;
            /** Format: int32 */
            seeding: number;
            /** Format: int64 */
            seeding_size: number;
            /** Format: int32 */
            snatched: number;
            /** Format: int32 */
            torrent_comments: number;
            /** Format: int64 */
            uploaded: number;
            username: string;
            warned: boolean;
        };
        RefreshToken: {
            refresh_token: string;
        };
        Register: {
            email: string;
            password: string;
            password_verify: string;
            username: string;
        };
        SearchCollagesQuery: {
            name?: string | null;
            /** Format: int32 */
            page: number;
            /** Format: int32 */
            page_size: number;
            tags?: string[] | null;
        };
        SearchSeriesQuery: {
            name?: string | null;
            /** Format: int32 */
            page: number;
            /** Format: int32 */
            page_size: number;
            tags?: string[] | null;
        };
        SearchTorrentRequestsQuery: {
            /** Format: int64 */
            page?: number | null;
            /** Format: int64 */
            page_size?: number | null;
            tags?: string[] | null;
            title_group_name?: string | null;
        };
        SentInvitation: {
            message: string;
            receiver_email: string;
            /** Format: int64 */
            user_application_id?: number | null;
        };
        Series: {
            banners?: string[] | null;
            covers: string[];
            /** Format: date-time */
            created_at: string;
            /** Format: int32 */
            created_by_id: number;
            description: string;
            /** Format: int64 */
            id: number;
            name: string;
            tags: string[];
            /** Format: date-time */
            updated_at: string;
        };
        SeriesAndTitleGroupHierarchyLite: {
            series: components["schemas"]["Series"];
            title_groups: components["schemas"]["TitleGroupHierarchyLite"][];
        };
        SeriesLite: {
            /** Format: int64 */
            id: number;
            name: string;
        };
        SeriesSearchResponse: {
            results: components["schemas"]["SeriesSearchResult"][];
            /** Format: int64 */
            total_items: number;
        };
        SeriesSearchResult: {
            banners?: string[] | null;
            covers: string[];
            /** Format: date-time */
            created_at: string;
            /** Format: int32 */
            created_by_id: number;
            /** Format: int64 */
            id: number;
            name: string;
            tags: string[];
            /** Format: int64 */
            title_groups_amount: number;
        };
        /** @enum {string} */
        Source: "CD" | "DVD5" | "DVD9" | "Vinyl" | "Web" | "Soundboard" | "SACD" | "DAT" | "Cassette" | "Blu-Ray" | "LaserDisc" | "HD-DVD" | "HDTV" | "PDTV" | "TV" | "VHS" | "Mixed" | "Physical Book";
        StaffPm: {
            /** Format: date-time */
            created_at: string;
            /** Format: int32 */
            created_by_id: number;
            /** Format: int64 */
            id: number;
            resolved: boolean;
            subject: string;
        };
        StaffPmHierarchy: {
            /** Format: date-time */
            created_at: string;
            created_by: components["schemas"]["UserLiteAvatar"];
            /** Format: int64 */
            id: number;
            messages: components["schemas"]["StaffPmMessageHierarchy"][];
            resolved: boolean;
            subject: string;
        };
        StaffPmMessage: {
            content: string;
            /** Format: date-time */
            created_at: string;
            /** Format: int32 */
            created_by_id: number;
            /** Format: int64 */
            id: number;
            /** Format: int64 */
            staff_pm_id: number;
        };
        StaffPmMessageHierarchy: {
            content: string;
            /** Format: date-time */
            created_at: string;
            created_by: components["schemas"]["UserLiteAvatar"];
            /** Format: int64 */
            id: number;
        };
        StaffPmMessageHierarchyLite: {
            /** Format: date-time */
            created_at: string;
            created_by: components["schemas"]["UserLite"];
        };
        StaffPmOverview: {
            /** Format: date-time */
            created_at: string;
            created_by: components["schemas"]["UserLite"];
            /** Format: int64 */
            id: number;
            last_message: components["schemas"]["StaffPmMessageHierarchyLite"];
            resolved: boolean;
            subject: string;
        };
        TitleGroup: {
            category?: null | components["schemas"]["TitleGroupCategory"];
            content_type: components["schemas"]["ContentType"];
            country_from?: string | null;
            covers: string[];
            /** Format: date-time */
            created_at: string;
            /** Format: int32 */
            created_by_id: number;
            description: string;
            embedded_links: {
                [key: string]: {
                    [key: string]: string;
                };
            };
            external_links: string[];
            /** Format: int32 */
            id: number;
            /** Format: int32 */
            master_group_id?: number | null;
            name: string;
            name_aliases: string[];
            original_language?: null | components["schemas"]["Language"];
            /** Format: date-time */
            original_release_date: string;
            platform?: null | components["schemas"]["Platform"];
            public_ratings: components["schemas"]["PublicRating"][];
            screenshots: string[];
            /** Format: int64 */
            series_id?: number | null;
            tagline?: string | null;
            tags: string[];
            /** Format: date-time */
            updated_at: string;
        };
        TitleGroupAndAssociatedData: {
            affiliated_artists: components["schemas"]["AffiliatedArtistHierarchy"][];
            affiliated_entities: components["schemas"]["AffiliatedEntityHierarchy"][];
            collages: components["schemas"]["CollageSearchResult"][];
            edition_groups: components["schemas"]["EditionGroupHierarchy"][];
            in_same_master_group: components["schemas"]["TitleGroupLite"][];
            is_subscribed: boolean;
            series: components["schemas"]["SeriesLite"];
            title_group: components["schemas"]["TitleGroup"];
            title_group_comments: components["schemas"]["TitleGroupCommentHierarchy"][];
            torrent_requests: components["schemas"]["TorrentRequestHierarchyLite"][];
        };
        /** @enum {string} */
        TitleGroupCategory: "Ep" | "Album" | "Single" | "Soundtrack" | "Anthology" | "Compilation" | "Remix" | "Bootleg" | "Mixtape" | "ConcertRecording" | "DjMix" | "FeatureFilm" | "ShortFilm" | "Game" | "Program" | "Illustrated" | "Periodical" | "Book" | "Article" | "Manual" | "Other";
        TitleGroupComment: {
            /** Format: int64 */
            answers_to_comment_id?: number | null;
            content: string;
            /** Format: date-time */
            created_at: string;
            /** Format: int32 */
            created_by_id: number;
            /** Format: int64 */
            id: number;
            /** Format: int32 */
            refers_to_torrent_id?: number | null;
            /** Format: int32 */
            title_group_id: number;
            /** Format: date-time */
            updated_at: string;
        };
        TitleGroupCommentHierarchy: {
            /** Format: int64 */
            answers_to_comment_id?: number | null;
            content: string;
            /** Format: date-time */
            created_at: string;
            created_by: components["schemas"]["UserLiteAvatar"];
            /** Format: int32 */
            created_by_id: number;
            /** Format: int64 */
            id: number;
            /** Format: int32 */
            refers_to_torrent_id?: number | null;
            /** Format: int32 */
            title_group_id: number;
            /** Format: date-time */
            updated_at: string;
        };
        TitleGroupHierarchyLite: {
            affiliated_artists: components["schemas"]["AffiliatedArtistLite"][];
            category?: null | components["schemas"]["TitleGroupCategory"];
            content_type: components["schemas"]["ContentType"];
            covers: string[];
            edition_groups: components["schemas"]["EditionGroupHierarchyLite"][];
            /** Format: int32 */
            id: number;
            name: string;
            /** Format: date-time */
            original_release_date: string;
            platform: components["schemas"]["Platform"];
            tags: string[];
        };
        TitleGroupLite: {
            content_type: components["schemas"]["ContentType"];
            covers: string[];
            edition_groups: components["schemas"]["EditionGroupInfoLite"][];
            /** Format: int32 */
            id: number;
            name: string;
            /** Format: date-time */
            original_release_date: string;
            platform?: null | components["schemas"]["Platform"];
        };
        Torrent: {
            /** Format: int32 */
            audio_bitrate?: number | null;
            audio_bitrate_sampling?: null | components["schemas"]["AudioBitrateSampling"];
            audio_channels?: null | components["schemas"]["AudioChannels"];
            audio_codec?: null | components["schemas"]["AudioCodec"];
            container: string;
            /** Format: date-time */
            created_at: string;
            /** Format: int32 */
            created_by_id: number;
            /** Format: date-time */
            deleted_at: string;
            /** Format: int64 */
            deleted_by_id?: number | null;
            description?: string | null;
            /** Format: int32 */
            download_factor: number;
            /** Format: int32 */
            duration?: number | null;
            /** Format: int32 */
            edition_group_id: number;
            extras: components["schemas"]["Extras"][];
            features?: components["schemas"]["Features"][] | null;
            file_amount_per_type: {
                [key: string]: string;
            };
            file_list: {
                [key: string]: string;
            };
            /** Format: int32 */
            id: number;
            languages: components["schemas"]["Language"][];
            /** Format: int64 */
            leechers: number;
            mediainfo?: string | null;
            release_group?: string | null;
            release_name?: string | null;
            /** Format: int64 */
            seeders: number;
            /** Format: int64 */
            size: number;
            /** Format: int64 */
            snatched: number;
            staff_checked: boolean;
            subtitle_languages: components["schemas"]["Language"][];
            /** Format: int32 */
            times_completed: number;
            trumpable?: string | null;
            /** Format: date-time */
            updated_at: string;
            /** Format: int32 */
            upload_factor: number;
            uploaded_as_anonymous: boolean;
            video_codec?: null | components["schemas"]["VideoCodec"];
            video_resolution?: null | components["schemas"]["VideoResolution"];
            /** Format: int32 */
            video_resolution_other_x?: number | null;
            /** Format: int32 */
            video_resolution_other_y?: number | null;
        };
        TorrentHierarchy: {
            /** Format: int32 */
            audio_bitrate?: number | null;
            audio_bitrate_sampling?: null | components["schemas"]["AudioBitrateSampling"];
            audio_channels?: null | components["schemas"]["AudioChannels"];
            audio_codec?: null | components["schemas"]["AudioCodec"];
            container: string;
            /** Format: date-time */
            created_at: string;
            created_by?: null | components["schemas"]["UserLite"];
            /** Format: int32 */
            created_by_id?: number | null;
            description?: string | null;
            /** Format: int32 */
            download_factor: number;
            /** Format: int32 */
            duration?: number | null;
            /** Format: int32 */
            edition_group_id: number;
            extras: components["schemas"]["Extras"][];
            features?: components["schemas"]["Features"][] | null;
            file_amount_per_type: {
                [key: string]: string;
            };
            file_list: {
                [key: string]: string;
            };
            /** Format: int32 */
            id: number;
            languages: components["schemas"]["Language"][];
            /** Format: int64 */
            leechers: number;
            mediainfo?: string | null;
            release_group?: string | null;
            release_name?: string | null;
            reports: components["schemas"]["TorrentReport"][];
            /** Format: int64 */
            seeders: number;
            /** Format: int64 */
            size: number;
            /** Format: int64 */
            snatched: number;
            staff_checked: boolean;
            subtitle_languages: components["schemas"]["Language"][];
            /** Format: int32 */
            times_completed: number;
            trumpable?: string | null;
            /** Format: date-time */
            updated_at: string;
            /** Format: int32 */
            upload_factor: number;
            uploaded_as_anonymous: boolean;
            uploader: components["schemas"]["UserLite"];
            video_codec?: null | components["schemas"]["VideoCodec"];
            video_resolution?: null | components["schemas"]["VideoResolution"];
            /** Format: int32 */
            video_resolution_other_x?: number | null;
            /** Format: int32 */
            video_resolution_other_y?: number | null;
        };
        TorrentHierarchyLite: {
            /** Format: int32 */
            audio_bitrate?: number | null;
            audio_bitrate_sampling?: null | components["schemas"]["AudioBitrateSampling"];
            audio_channels?: string | null;
            audio_codec?: null | components["schemas"]["AudioCodec"];
            container: string;
            /** Format: date-time */
            created_at: string;
            /** Format: int32 */
            download_factor: number;
            /** Format: int32 */
            duration?: number | null;
            /** Format: int32 */
            edition_group_id: number;
            extras: components["schemas"]["Extras"][];
            features?: components["schemas"]["Features"][] | null;
            file_amount_per_type: {
                [key: string]: string;
            };
            /** Format: int32 */
            id: number;
            languages: components["schemas"]["Language"][];
            /** Format: int64 */
            leechers: number;
            release_group?: string | null;
            release_name?: string | null;
            reports: components["schemas"]["TorrentReport"][];
            /** Format: int64 */
            seeders: number;
            /** Format: int64 */
            size: number;
            /** Format: int64 */
            snatched: number;
            staff_checked: boolean;
            subtitle_languages: components["schemas"]["Language"][];
            /** Format: int32 */
            times_completed: number;
            trumpable?: string | null;
            /** Format: int32 */
            upload_factor: number;
            video_codec?: null | components["schemas"]["VideoCodec"];
            video_resolution?: null | components["schemas"]["VideoResolution"];
            /** Format: int32 */
            video_resolution_other_x?: number | null;
            /** Format: int32 */
            video_resolution_other_y?: number | null;
        };
        TorrentMinimal: {
            /** Format: date-time */
            created_at: string;
            /** Format: int32 */
            id: number;
            info_hash?: string | null;
        };
        TorrentReport: {
            description: string;
            /** Format: int64 */
            id: number;
            /** Format: date-time */
            reported_at: string;
            /** Format: int32 */
            reported_by_id: number;
            /** Format: int32 */
            reported_torrent_id: number;
        };
        TorrentRequest: {
            audio_bitrate_sampling: components["schemas"]["AudioBitrateSampling"][];
            audio_channels: components["schemas"]["AudioChannels"][];
            audio_codec: components["schemas"]["AudioCodec"][];
            container: string[];
            /** Format: date-time */
            created_at: string;
            /** Format: int32 */
            created_by_id: number;
            description?: string | null;
            edition_name?: string | null;
            features: components["schemas"]["Features"][];
            /** Format: date-time */
            filled_at: string;
            /** Format: int32 */
            filled_by_torrent_id?: number | null;
            /** Format: int32 */
            filled_by_user_id?: number | null;
            /** Format: int64 */
            id: number;
            languages: components["schemas"]["Language"][];
            release_group?: string | null;
            source: components["schemas"]["Source"][];
            subtitle_languages: components["schemas"]["Language"][];
            /** Format: int32 */
            title_group_id: number;
            /** Format: date-time */
            updated_at: string;
            video_codec: components["schemas"]["VideoCodec"][];
            video_resolution: components["schemas"]["VideoResolution"][];
            /** Format: int32 */
            video_resolution_other_x?: number | null;
            /** Format: int32 */
            video_resolution_other_y?: number | null;
        };
        TorrentRequestAndAssociatedData: {
            affiliated_artists: components["schemas"]["AffiliatedArtistHierarchy"][];
            comments: components["schemas"]["TorrentRequestCommentHierarchy"][];
            series: components["schemas"]["SeriesLite"];
            title_group: components["schemas"]["TitleGroup"];
            torrent_request: components["schemas"]["TorrentRequest"];
            votes: components["schemas"]["TorrentRequestVoteHierarchy"][];
        };
        TorrentRequestBounty: {
            /** Format: int64 */
            bonus_points: number;
            /** Format: int64 */
            upload: number;
        };
        TorrentRequestComment: {
            content: string;
            /** Format: date-time */
            created_at: string;
            /** Format: int32 */
            created_by_id: number;
            /** Format: int64 */
            id: number;
            /** Format: int64 */
            torrent_request_id: number;
            /** Format: date-time */
            updated_at: string;
        };
        TorrentRequestCommentHierarchy: {
            content: string;
            /** Format: date-time */
            created_at: string;
            created_by: components["schemas"]["UserLiteAvatar"];
            /** Format: int32 */
            created_by_id: number;
            /** Format: int64 */
            id: number;
            /** Format: int64 */
            torrent_request_id: number;
            /** Format: date-time */
            updated_at: string;
        };
        TorrentRequestFill: {
            /** Format: int32 */
            torrent_id: number;
            /** Format: int64 */
            torrent_request_id: number;
        };
        TorrentRequestHierarchyLite: {
            bounty: components["schemas"]["TorrentRequestBounty"];
            created_by: components["schemas"]["UserLite"];
            torrent_request: components["schemas"]["TorrentRequest"];
            /** Format: int32 */
            user_votes_amount: number;
        };
        TorrentRequestVote: {
            /** Format: int64 */
            bounty_bonus_points: number;
            /** Format: int64 */
            bounty_upload: number;
            /** Format: date-time */
            created_at: string;
            /** Format: int32 */
            created_by_id: number;
            /** Format: int64 */
            id: number;
            /** Format: int64 */
            torrent_request_id: number;
        };
        TorrentRequestVoteHierarchy: {
            /** Format: int64 */
            bounty_bonus_points: number;
            /** Format: int64 */
            bounty_upload: number;
            /** Format: date-time */
            created_at: string;
            created_by: components["schemas"]["UserLite"];
            /** Format: int32 */
            created_by_id: number;
            /** Format: int64 */
            id: number;
            /** Format: int64 */
            torrent_request_id: number;
        };
        TorrentRequestWithTitleGroupLite: {
            affiliated_artists: components["schemas"]["AffiliatedArtistHierarchy"][];
            bounty: components["schemas"]["TorrentRequestBounty"];
            series: components["schemas"]["SeriesLite"];
            title_group: components["schemas"]["TitleGroupLite"];
            torrent_request: components["schemas"]["TorrentRequest"];
            /** Format: int32 */
            user_votes_amount: number;
        };
        TorrentSearch: {
            order: components["schemas"]["TorrentSearchOrder"];
            /** Format: int64 */
            page: number;
            /** Format: int64 */
            page_size: number;
            sort_by: components["schemas"]["TorrentSearchSortField"];
            title_group: components["schemas"]["TorrentSearchTitleGroup"];
            torrent: components["schemas"]["TorrentSearchTorrent"];
        };
        /** @enum {string} */
        TorrentSearchOrder: "asc" | "desc";
        TorrentSearchResults: {
            title_groups: components["schemas"]["TitleGroupHierarchyLite"][];
        };
        /** @enum {string} */
        TorrentSearchSortField: "torrent_created_at" | "torrent_size" | "torrent_snatched_at" | "title_group_original_release_date";
        TorrentSearchTitleGroup: {
            include_empty_groups: boolean;
            name: string;
        };
        TorrentSearchTorrent: {
            /** Format: int32 */
            created_by_id?: number | null;
            reported?: boolean | null;
            /** Format: int32 */
            snatched_by_id?: number | null;
            staff_checked?: boolean | null;
        };
        TorrentToDelete: {
            displayed_reason?: string | null;
            /** Format: int32 */
            id: number;
            reason: string;
        };
        UpdateUserApplication: {
            status: components["schemas"]["UserApplicationStatus"];
            /** Format: int64 */
            user_application_id: number;
        };
        UploadInformation: {
            announce_url: string;
        };
        UploadedTorrent: {
            /** Format: int32 */
            audio_bitrate: number;
            audio_bitrate_sampling: components["schemas"]["AudioBitrateSampling"];
            audio_channels: string;
            audio_codec: components["schemas"]["AudioCodec"];
            container: string;
            description: string;
            /** Format: int32 */
            duration: number;
            /** Format: int32 */
            edition_group_id: number;
            extras: string;
            features: string;
            languages: string;
            mediainfo: string;
            release_group: string;
            release_name: string;
            subtitle_languages: string;
            /** Format: binary */
            torrent_file: string;
            uploaded_as_anonymous: boolean;
            video_codec: components["schemas"]["VideoCodec"];
            video_resolution: components["schemas"]["VideoResolution"];
            /** Format: int32 */
            video_resolution_other_x: number;
            /** Format: int32 */
            video_resolution_other_y: number;
        };
        User: {
            /** Format: int64 */
            artist_comments: number;
            avatar?: string | null;
            /** Format: int64 */
            average_seeding_time: number;
            banned: boolean;
            /** Format: int64 */
            bonus_points: number;
            class: components["schemas"]["UserClass"];
            /** Format: int64 */
            collages_started: number;
            /** Format: date-time */
            created_at: string;
            description: string;
            /** Format: int64 */
            downloaded: number;
            email: string;
            /** Format: int32 */
            forum_posts: number;
            /** Format: int32 */
            forum_threads: number;
            /** Format: int32 */
            freeleech_tokens: number;
            /** Format: int32 */
            id: number;
            /** Format: int32 */
            invitations: number;
            /** Format: int64 */
            invited: number;
            /** Format: date-time */
            last_seen: string;
            /** Format: int32 */
            leeching: number;
            passkey: string;
            password_hash: string;
            /** Format: double */
            ratio: number;
            /** Format: int64 */
            real_downloaded: number;
            /** Format: int64 */
            real_uploaded: number;
            /** Format: 0.0.0.0 */
            registered_from_ip: string;
            /** Format: int32 */
            request_comments: number;
            /** Format: int64 */
            requests_filled: number;
            /** Format: int64 */
            requests_voted: number;
            /** Format: double */
            required_ratio: number;
            /** Format: int32 */
            seeding: number;
            /** Format: int64 */
            seeding_size: number;
            settings: unknown;
            /** Format: int32 */
            snatched: number;
            staff_note: string;
            /** Format: int32 */
            torrent_comments: number;
            /** Format: int64 */
            uploaded: number;
            username: string;
            warned: boolean;
        };
        UserApplication: {
            body: string;
            /** Format: date-time */
            created_at: string;
            email: string;
            /** Format: int64 */
            id: number;
            referral: string;
            staff_note: string;
            status: components["schemas"]["UserApplicationStatus"];
        };
        /** @enum {string} */
        UserApplicationStatus: "pending" | "accepted" | "rejected";
        /** @enum {string} */
        UserClass: "newbie" | "staff" | "tracker";
        UserCreatedAffiliatedArtist: {
            /** Format: int64 */
            artist_id: number;
            nickname?: string | null;
            roles: components["schemas"]["ArtistRole"][];
            /** Format: int32 */
            title_group_id: number;
        };
        UserCreatedArtist: {
            description: string;
            name: string;
            pictures: string[];
        };
        UserCreatedCollage: {
            category: components["schemas"]["CollageCategory"];
            collage_type: components["schemas"]["CollageType"];
            cover?: string | null;
            description: string;
            name: string;
            tags: string[];
        };
        UserCreatedCollageEntry: {
            /** Format: int64 */
            artist_id?: number | null;
            /** Format: int64 */
            collage_id: number;
            /** Format: int64 */
            entity_id?: number | null;
            /** Format: int32 */
            master_group_id?: number | null;
            note?: string | null;
            /** Format: int32 */
            title_group_id?: number | null;
        };
        UserCreatedConversation: {
            first_message: components["schemas"]["UserCreatedConversationMessage"];
            /** Format: int32 */
            receiver_id: number;
            subject: string;
        };
        UserCreatedConversationMessage: {
            content: string;
            /** Format: int64 */
            conversation_id: number;
        };
        UserCreatedEditionGroup: {
            additional_information: {
                [key: string]: string;
            };
            covers: string[];
            description?: string | null;
            distributor?: string | null;
            external_links: string[];
            name?: string | null;
            /** Format: date-time */
            release_date: string;
            source?: null | components["schemas"]["Source"];
            /** Format: int32 */
            title_group_id: number;
        };
        UserCreatedForumPost: {
            content: string;
            /** Format: int64 */
            forum_thread_id: number;
        };
        UserCreatedForumThread: {
            first_post: components["schemas"]["UserCreatedForumPost"];
            /** Format: int32 */
            forum_sub_category_id: number;
            name: string;
        };
        UserCreatedGift: {
            /** Format: int64 */
            bonus_points: number;
            /** Format: int32 */
            freeleech_tokens: number;
            message: string;
            /** Format: int32 */
            receiver_id: number;
        };
        UserCreatedMasterGroup: {
            name?: string | null;
        };
        UserCreatedSeries: {
            banners: string[];
            covers: string[];
            description: string;
            name: string;
            tags: string[];
        };
        UserCreatedStaffPm: {
            first_message: components["schemas"]["UserCreatedStaffPmMessage"];
            subject: string;
        };
        UserCreatedStaffPmMessage: {
            content: string;
            /** Format: int64 */
            staff_pm_id: number;
        };
        UserCreatedTitleGroup: {
            affiliated_artists: components["schemas"]["UserCreatedAffiliatedArtist"][];
            category?: null | components["schemas"]["TitleGroupCategory"];
            content_type: components["schemas"]["ContentType"];
            country_from?: string | null;
            covers: string[];
            description: string;
            embedded_links: {
                [key: string]: {
                    [key: string]: string;
                };
            };
            external_links: string[];
            /** Format: int32 */
            master_group_id?: number | null;
            name: string;
            name_aliases: string[];
            original_language?: null | components["schemas"]["Language"];
            /** Format: date-time */
            original_release_date: string;
            platform?: null | components["schemas"]["Platform"];
            screenshots: string[];
            /** Format: int64 */
            series_id?: number | null;
            tagline?: string | null;
            tags: string[];
        };
        UserCreatedTitleGroupComment: {
            /** Format: int64 */
            answers_to_comment_id?: number | null;
            content: string;
            /** Format: int32 */
            refers_to_torrent_id?: number | null;
            /** Format: int32 */
            title_group_id: number;
        };
        UserCreatedTorrentReport: {
            description: string;
            /** Format: int32 */
            reported_torrent_id: number;
        };
        UserCreatedTorrentRequest: {
            audio_bitrate_sampling: components["schemas"]["AudioBitrateSampling"][];
            audio_channels: components["schemas"]["AudioChannels"][];
            audio_codec: components["schemas"]["AudioCodec"][];
            container: string[];
            description?: string | null;
            edition_name?: string | null;
            features: components["schemas"]["Features"][];
            initial_vote: components["schemas"]["UserCreatedTorrentRequestVote"];
            languages: components["schemas"]["Language"][];
            release_group?: string | null;
            source: components["schemas"]["Source"][];
            subtitle_languages: components["schemas"]["Language"][];
            /** Format: int32 */
            title_group_id: number;
            video_codec: components["schemas"]["VideoCodec"][];
            video_resolution: components["schemas"]["VideoResolution"][];
            /** Format: int32 */
            video_resolution_other_x?: number | null;
            /** Format: int32 */
            video_resolution_other_y?: number | null;
        };
        UserCreatedTorrentRequestComment: {
            content: string;
            /** Format: int64 */
            torrent_request_id: number;
        };
        UserCreatedTorrentRequestVote: {
            /** Format: int64 */
            bounty_bonus_points: number;
            /** Format: int64 */
            bounty_upload: number;
            /** Format: int64 */
            torrent_request_id: number;
        };
        UserCreatedUserApplication: {
            body: string;
            email: string;
            referral: string;
        };
        UserCreatedUserWarning: {
            ban: boolean;
            /** Format: date-time */
            expires_at?: string | null;
            reason: string;
            /** Format: int32 */
            user_id: number;
        };
        UserCreatedWikiArticle: {
            body: string;
            title: string;
        };
        UserLite: {
            banned: boolean;
            /** Format: int32 */
            id: number;
            username: string;
            warned: boolean;
        };
        UserLiteAvatar: {
            avatar?: string | null;
            banned: boolean;
            /** Format: int32 */
            id: number;
            username: string;
            warned: boolean;
        };
        UserMinimal: {
            /** Format: int32 */
            id: number;
            passkey: string;
        };
        UserWarning: {
            ban: boolean;
            /** Format: date-time */
            created_at: string;
            /** Format: int32 */
            created_by_id: number;
            /** Format: date-time */
            expires_at?: string | null;
            /** Format: int64 */
            id: number;
            reason: string;
            /** Format: int32 */
            user_id: number;
        };
        /** @enum {string} */
        VideoCodec: "mpeg1" | "mpeg2" | "Xvid" | "divX" | "h264" | "h265" | "vc-1" | "vp9" | "BD50" | "UHD100";
        /** @enum {string} */
        VideoResolution: "Other" | "480p" | "480i" | "576i" | "576p" | "720p" | "1080p" | "1080i" | "1440p" | "2160p" | "4320p";
        WikiArticle: {
            body: string;
            /** Format: date-time */
            created_at: string;
            /** Format: int32 */
            created_by_id: number;
            /** Format: int64 */
            id: number;
            title: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: int32 */
            updated_by_id: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "Create artist affiliation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreatedAffiliatedArtist"][];
            };
        };
        responses: {
            /** @description Successfully created the artist affiliations */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AffiliatedArtistHierarchy"][];
                };
            };
        };
    };
    "Delete artist affiliation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully removed the artist affiliations */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Get artist publications": {
        parameters: {
            query: {
                id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully got the artist's publications */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArtistAndTitleGroupsLite"];
                };
            };
        };
    };
    "Create artist": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreatedArtist"][];
            };
        };
        responses: {
            /** @description Successfully created the artists, returned in the same order as the one sent.
             *                 In the case of a db conflict (duplicate), the existing entry is returned (can be seen with the created_at attribute). */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Artist"][];
                };
            };
        };
    };
    "Create user application": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreatedUserApplication"];
            };
        };
        responses: {
            /** @description Successfully created user application */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserApplication"];
                };
            };
        };
    };
    Login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Login"];
            };
        };
        responses: {
            /** @description Successfully logged in */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginResponse"];
                };
            };
        };
    };
    "Refresh token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RefreshToken"];
            };
        };
        responses: {
            /** @description Successfully refreshed the token */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginResponse"];
                };
            };
        };
    };
    Register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Register"];
            };
        };
        responses: {
            /** @description Successfully registered the user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    "Get a collage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Collage information and its entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CollageAndAssociatedData"];
                };
            };
        };
    };
    "Create a collage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreatedCollage"];
            };
        };
        responses: {
            /** @description Successfully created the collage */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Collage"];
                };
            };
        };
    };
    "Inserts entries into a collage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreatedCollageEntry"][];
            };
        };
        responses: {
            /** @description Successfully created the collage entries */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CollageEntry"][];
                };
            };
        };
    };
    "Get conversations": {
        parameters: {
            query: {
                id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found the conversation and its messages */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConversationHierarchy"];
                };
            };
        };
    };
    "Create conversation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreatedConversation"];
            };
        };
        responses: {
            /** @description Successfully created the conversation and first message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Conversation"];
                };
            };
        };
    };
    "Create conversation message": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreatedConversationMessage"];
            };
        };
        responses: {
            /** @description Successfully created the conversation's message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConversationMessage"];
                };
            };
        };
    };
    "Create edition group": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreatedEditionGroup"];
            };
        };
        responses: {
            /** @description Successfully created the edition_group */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EditionGroup"];
                };
            };
        };
    };
    "Get comic vine data": {
        parameters: {
            query: {
                url: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalDBData"];
                };
            };
        };
    };
    "Get isbn data": {
        parameters: {
            query: {
                isbn: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalDBData"];
                };
            };
        };
    };
    "Get Musicbranz data": {
        parameters: {
            query: {
                url: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalDBData"];
                };
            };
        };
    };
    "Get TMDB data": {
        parameters: {
            query: {
                url: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExternalDBData"];
                };
            };
        };
    };
    "Create forum": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns an overview of the forum */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForumOverview"];
                };
            };
        };
    };
    "Create forum post": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreatedForumPost"];
            };
        };
        responses: {
            /** @description Successfully created the forum post */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForumPost"];
                };
            };
        };
    };
    "Get forim sub-category thread": {
        parameters: {
            query: {
                id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the threads in the forum sub-category */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForumSubCategoryHierarchy"];
                };
            };
        };
    };
    "Get forum thread": {
        parameters: {
            query: {
                id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the thread and its posts */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForumThreadAndPosts"];
                };
            };
        };
    };
    "Create forum thread": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreatedForumThread"];
            };
        };
        responses: {
            /** @description Successfully created the forum thread */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForumThread"];
                };
            };
        };
    };
    "Create gift": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreatedGift"];
            };
        };
        responses: {
            /** @description Successfully sent the gift */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Gift"];
                };
            };
        };
    };
    "Get home data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HomePage"];
                };
            };
        };
    };
    "Create invitation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SentInvitation"];
            };
        };
        responses: {
            /** @description Successfully sent the invitation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Invitation"];
                };
            };
        };
    };
    "Create master group": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreatedMasterGroup"];
            };
        };
        responses: {
            /** @description Successfully created the master group */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MasterGroup"];
                };
            };
        };
    };
    "Search artists": {
        parameters: {
            query: {
                name: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully got the artists and some data about them */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArtistLite"][];
                };
            };
        };
    };
    "Search collages": {
        parameters: {
            query: {
                name?: string | null;
                tags?: string[] | null;
                page: number;
                page_size: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully got the collages and some data about them */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CollageSearchResponse"];
                };
            };
        };
    };
    "Search series": {
        parameters: {
            query: {
                name?: string | null;
                tags?: string[] | null;
                page: number;
                page_size: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully got the series and some data about them */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SeriesSearchResponse"];
                };
            };
        };
    };
    "Search title group info": {
        parameters: {
            query: {
                name: string;
                content_type?: null | components["schemas"]["ContentType"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns title groups with their name containing the provided string, only the 5 first matches */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TitleGroupLite"][];
                };
            };
        };
    };
    "Search torrent requests": {
        parameters: {
            query?: {
                /** @description Name of the title group to search for */
                title_group_name?: string;
                /** @description Tags to filter title groups by */
                tags?: string[];
                /** @description Page number (default 1) */
                page?: number;
                /** @description Results per page (default 50) */
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of torrent requests with associated title groups */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TorrentRequestWithTitleGroupLite"][];
                };
            };
        };
    };
    "Search torrents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TorrentSearch"];
            };
        };
        responses: {
            /** @description Title groups and their torrents found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TorrentSearchResults"];
                };
            };
        };
    };
    "Get series": {
        parameters: {
            query: {
                id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully got the series */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SeriesAndTitleGroupHierarchyLite"];
                };
            };
        };
    };
    "Create series": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreatedSeries"];
            };
        };
        responses: {
            /** @description Successfully created the series */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Series"];
                };
            };
        };
    };
    "List staff PMs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List staff PM conversations */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StaffPmOverview"][];
                };
            };
        };
    };
    "Create staff PM": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreatedStaffPm"];
            };
        };
        responses: {
            /** @description Created staff PM conversation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StaffPm"];
                };
            };
        };
    };
    "Reply to staff PM": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreatedStaffPmMessage"];
            };
        };
        responses: {
            /** @description Created staff PM message */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StaffPmMessage"];
                };
            };
        };
    };
    "Get staff PM": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Staff PM id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Staff PM conversation details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StaffPmHierarchy"];
                };
            };
        };
    };
    "Resolve staff PM": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Staff PM id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Resolved staff PM */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StaffPm"];
                };
            };
        };
    };
    "Create subscription": {
        parameters: {
            query: {
                item_id: number;
                item: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully subscribed to the item */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Remove subscription": {
        parameters: {
            query: {
                item_id: number;
                item: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully unsubscribed to the item */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Get title group": {
        parameters: {
            query: {
                id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully got the title_group */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TitleGroupAndAssociatedData"];
                };
            };
        };
    };
    "Edit title group": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EditedTitleGroup"];
            };
        };
        responses: {
            /** @description Successfully edited the title group */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TitleGroup"];
                };
            };
        };
    };
    "Create title group": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreatedTitleGroup"];
            };
        };
        responses: {
            /** @description Successfully created the title_group */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TitleGroup"];
                };
            };
        };
    };
    "Create title group comment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreatedTitleGroupComment"];
            };
        };
        responses: {
            /** @description Successfully posted the comment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TitleGroupComment"];
                };
            };
        };
    };
    "Get title group info lite": {
        parameters: {
            query: {
                id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully got the title_group (lite info) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TitleGroupLite"];
                };
            };
        };
    };
    "Get torrent requests": {
        parameters: {
            query: {
                id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully got the torrent request with associated data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TorrentRequestAndAssociatedData"];
                };
            };
        };
    };
    "Create torrent request": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreatedTorrentRequest"];
            };
        };
        responses: {
            /** @description Successfully created the torrent_request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TorrentRequest"];
                };
            };
        };
    };
    "Create torrent request comment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreatedTorrentRequestComment"];
            };
        };
        responses: {
            /** @description Successfully commented on the torrent request */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TorrentRequestComment"];
                };
            };
        };
    };
    "Fill torrent request": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TorrentRequestFill"];
            };
        };
        responses: {
            /** @description Successfully filled the torrent request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Create torrent request vote": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreatedTorrentRequestVote"];
            };
        };
        responses: {
            /** @description Successfully voted on the torrent_request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TorrentRequestVote"];
                };
            };
        };
    };
    "Download .torrent file": {
        parameters: {
            query: {
                id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully downloaded the torrent file */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Edit torrent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EditedTorrent"];
            };
        };
        responses: {
            /** @description Successfully edited the torrent */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Torrent"];
                };
            };
        };
    };
    "Create torrent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UploadedTorrent"];
            };
        };
        responses: {
            /** @description Successfully uploaded the torrent */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Torrent"];
                };
            };
        };
    };
    "Delete torrent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TorrentToDelete"];
            };
        };
        responses: {
            /** @description Torrent deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Get registered torrents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description All registered torrents */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TorrentMinimal"][];
                };
            };
        };
    };
    "Create torrent report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreatedTorrentReport"];
            };
        };
        responses: {
            /** @description Torrent successfully reported */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TorrentReport"];
                };
            };
        };
    };
    "Get top torrent": {
        parameters: {
            query: {
                period: string;
                amount: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Top torrents found (and their title/edition group), sorted by amount of users who seeded at some point in time */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TorrentSearchResults"];
                };
            };
        };
    };
    "Get upload information": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Information related to uploading */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadInformation"];
                };
            };
        };
    };
    "Get user applications": {
        parameters: {
            query?: {
                /** @description Maximum number of applications to return (default: 50) */
                limit?: number;
                /** @description Page (default: 1) */
                page?: number;
                /** @description Filter by application status: 'pending', 'accepted', or 'rejected' */
                status?: string;
                /** @description Filter by checked status: true for checked (accepted/rejected), false for unchecked (pending) */
                checked?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved user applications */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserApplication"][];
                };
            };
            /** @description Bad Request - Invalid status parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Only staff members can view user applications */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Update user application status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserApplication"];
            };
        };
        responses: {
            /** @description Successfully updated user application status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserApplication"];
                };
            };
            /** @description Forbidden - Only staff members can update user applications */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User application not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Get users": {
        parameters: {
            query: {
                id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully got the user's profile */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicProfile"];
                };
            };
        };
    };
    "Edit user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EditedUser"];
            };
        };
        responses: {
            /** @description Successfully edited the user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "Get user conversations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found the conversations and some of their metadata */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConversationsOverview"];
                };
            };
        };
    };
    "Get me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully got the user's profile */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Profile"];
                };
            };
        };
    };
    "Get registered users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description All registered users */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserMinimal"][];
                };
            };
        };
    };
    "Warn users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreatedUserWarning"];
            };
        };
        responses: {
            /** @description Successfully warned the user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserWarning"];
                };
            };
        };
    };
    "Get wiki article": {
        parameters: {
            query: {
                id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully found the wiki article */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WikiArticle"];
                };
            };
        };
    };
    "Create wiki article": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreatedWikiArticle"];
            };
        };
        responses: {
            /** @description Successfully created the wiki article */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WikiArticle"];
                };
            };
        };
    };
}
