name: Backend CI

on:
  push:
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yml'

env:
  CARGO_TERM_COLOR: always


jobs:

  build:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./backend
    
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache-workspaces: ./backend
      
      - name: Build
        run: cargo build
        env:
          SQLX_OFFLINE: "true"
  
      - name: Run tests
        run: cargo test
        env:
          SQLX_OFFLINE: "true"

  lint:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./backend
    
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy
          cache-workspaces: ./backend
  
      - name: Check clippy for new warnings
        run: cargo clippy
        env:
          SQLX_OFFLINE: "true"
  

  schema-check:
    runs-on: ubuntu-latest
    container: rust:1.86-bullseye
    defaults:
      run:
        working-directory: ./backend

    services:
      arcadiadb:
        image: postgres
        env:
          POSTGRES_USER: arcadia
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache-workspaces: ./backend

      - name: Setup env
        run: cp -f .env.ci .env

      - name: Install sqlx
        run: cargo install sqlx-cli

      - name: Ensure schema and query metadata are in sync
        run: cargo sqlx prepare --check

